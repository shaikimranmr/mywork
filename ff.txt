using System;

public class Program
{
    // Declare a delegate
    public delegate void print(string message);

    // Method matching the delegate signature
    public static void printmess(string message)
    {
        Console.WriteLine(message);
    }
}

class Imran
{
    public static void Main(string[] args)
    {
        // Instantiate the delegate, pointing to printmess method
        Program.print del = Program.printmess;

        // Call the method via the delegate
        del("hello imran");


    }
}

multi cste delegate

using System;

public class Program
{
    // Declare a delegate
    public delegate void NotifyDelegate(string message);

    // Method to notify user
    public static void NotifyUser(string message)
    {
        Console.WriteLine("User: " + message);
    }

    // Method to log notification
    public static void LogNotification(string message)
    {
        Console.WriteLine("Log: " + message);
    }

    public static void Main()
    {
        // Create a multicast delegate
        NotifyDelegate notify = NotifyUser; // Add first method
        notify += LogNotification; // Add second method

        // Call the delegate
        notify("System started"); // Calls both methods
    }
}
annomus delegate
using System;

public class Program
{
    public delegate void PrintDelegate(string message);

    public static void Main()
    {
        // Creating an anonymous delegate
        PrintDelegate print = delegate (string message)
        {
            Console.WriteLine("Anonymous Delegate: " + message);
        };

        // Invoking the anonymous delegate
        print("Hello, World!");
    }
}
Equivalent Example using Lambda Expressions:

using System;

public class Program
{
    public delegate void PrintDelegate(string message);

    public static void Main()
    {
        // Using a lambda expression instead of an anonymous delegate
        PrintDelegate print = message => Console.WriteLine("Lambda Expression: " + message);

        // Invoking the delegate
        print("Hello, World!");
    }
}

using System;

public class Publisher
{
    // Declare an event
    public event Action OnNotify;

    // Method to raise the event
    public void DoSomething()
    {
        Console.WriteLine("Doing something...");
        OnNotify?.Invoke(); // Notify subscribers
    }
}
Event:
public class Subscriber
{
    // Method that will be called when the event is raised
    public void HandleNotification()
    {
        Console.WriteLine("Notification received!");
    }
}

public class Program
{
    public static void Main()
    {
        Publisher publisher = new Publisher();
        Subscriber subscriber = new Subscriber();

        // Subscribe to the event
        publisher.OnNotify += subscriber.HandleNotification;

        // Perform an action that raises the event
        publisher.DoSomething();
    }
}
